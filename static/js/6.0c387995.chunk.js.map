{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.js","hooks/http.hook.js","resources/img/x-men.png","components/pages/SIngleComicPage.jsx"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getComic","_transformComics","getAllComics","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","comic","className","Helmet","content","to","SingleComicPage","props","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner"],"mappings":"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","file":"static/js/6.0c387995.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    // <img src={process.env.PUBLIC_URL + '/error.gif'}/> //Если нам нужно обратиться к папке паблик то нужно написать вот такой путь с процесс и инв и паблик урл\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {loading, error, request, clearError} = useHttp()\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=91f439be32ba6f8326f987b1a44facfe';\r\n  const _baseOffset = 210;\r\n\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const _transformCharacter = (char) =>  {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about count of page',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'eu-us',\r\n      price: comics.prices[0].price || 'Not available'\r\n    }\r\n  }\r\n\r\n\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback( async (url, method = 'GET', body = null, headers={'Content-Type' : 'applications/json'}) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok){\r\n        throw new Error(`COuld not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n\r\n      return data\r\n    } catch(e){\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/x-men.41b39e19.png\";","import { Helmet } from \"react-helmet\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport '../singleComic/singleComic.scss';\r\nimport xMen from '../../resources/img/x-men.png';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst SingleComicPage = (props) => {\r\n  const {comicId} = useParams();\r\n  const [comic, setComic] = useState(null)\r\n  const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n  const marvelService = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId]);\r\n\r\n  const updateComic = () => {\r\n      clearError();\r\n      getComic(comicId)\r\n          .then(onComicLoaded)\r\n  }\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  }\r\n\r\n  const errorMessage = error ? <ErrorMessage/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n  return (\r\n    <>\r\n      \r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n  const {title, thumbnail, description, price, language, pageCount } = comic;\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content={`${title} comics book`}\r\n        />\r\n        <title>{title}</title>\r\n      </Helmet> \r\n      <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n      <div className=\"single-comic__info\">\r\n          <h2 className=\"single-comic__name\">{title}</h2>\r\n          <p className=\"single-comic__descr\">{description}</p>\r\n          <p className=\"single-comic__descr\">{pageCount}</p>\r\n          <p className=\"single-comic__descr\">Language: {language}</p>\r\n          <div className=\"single-comic__price\">{price} {price ? '$' : ''}</div>\r\n      </div>\r\n      <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleComicPage"],"sourceRoot":""}