{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.js","hooks/http.hook.js","components/comicsList/ComicsList.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/comicsPage.jsx"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getComic","_transformComics","getAllComics","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","ComicsList","props","setComics","newComicsLoading","setNewComicsLoading","setOffset","comicsEnded","setComicsEnded","useEffect","initial","onRequest","console","log","then","onComicsLoaded","newComicsList","ended","length","itemRefs","useRef","item","i","className","tabIndex","ref","el","current","to","spinner","errorMessage","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","Helmet","content"],"mappings":"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","file":"static/js/5.fa63593c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    // <img src={process.env.PUBLIC_URL + '/error.gif'}/> //Если нам нужно обратиться к папке паблик то нужно написать вот такой путь с процесс и инв и паблик урл\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {loading, error, request, clearError} = useHttp()\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=91f439be32ba6f8326f987b1a44facfe';\r\n  const _baseOffset = 210;\r\n\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const _transformCharacter = (char) =>  {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about count of page',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'eu-us',\r\n      price: comics.prices[0].price || 'Not available'\r\n    }\r\n  }\r\n\r\n\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback( async (url, method = 'GET', body = null, headers={'Content-Type' : 'applications/json'}) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok){\r\n        throw new Error(`COuld not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n\r\n      return data\r\n    } catch(e){\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError}\r\n}","import { useState, useEffect, useRef } from 'react';\nimport './comicsList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/spinner';\nimport { Link } from 'react-router-dom';\n\nconst ComicsList = (props) => {\n\n    const [comics, setComics]  = useState([]);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect((offset, initial) => {\n        onRequest(offset, true)\n        console.log('request')\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true)\n        getAllComics(offset)\n            .then(onComicsLoaded)\n    }\n\n    const onComicsLoaded = (newComicsList) => {\n\n        let ended = false;\n\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComics(comics => [...comics, ...newComicsList]);\n        setNewComicsLoading(false);\n        setOffset(offset => +offset + 8);\n        setComicsEnded(comicsEnded => ended);\n    }\n\n    console.log('Listing!')\n\n    let itemRefs = useRef([]);\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n\n            \n            return (\n                <li \n                    className=\"comics__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={i}>\n                    \n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}$</div>\n                    </Link>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return items\n    }\n\n    const items = renderItems(comics);\n    \n    const spinner = loading && !newComicsLoading ? <Spinner/> : null\n    const errorMessage = error ? <ErrorMessage/> : null;\n\n\n    return (\n        <div className=\"comics__list\">\n            <ul className=\"comics__grid\">\n                {spinner}\n                {errorMessage}\n                {items}\n            </ul>\n            <button\n                className=\"button button__main button__long\"\n                disabled={newComicsLoading}\n                style={{\n                    'display': comicsEnded ? 'none' : 'block'\n                }}\n                onClick={() => onRequest(offset)}\n                >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { Helmet } from \"react-helmet\";\r\nimport ComicsList from \"../comicsList/ComicsList\"\r\nimport AppBanner from \"../appBanner/AppBanner\"\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content=\"Page with list of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet> \r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}