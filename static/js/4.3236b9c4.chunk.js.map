{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/mainPage.jsx"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getComic","_transformComics","getAllComics","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","emptyImg","imgClasses","className","href","RandomChar","setChar","onCharLoaded","updateChar","Math","floor","random","then","useEffect","errorMessage","spinner","content","onClick","mjolnir","CharList","props","chars","setChars","newItemLoading","setNewItenLoading","setOffset","charEnded","setCharEnded","initial","onRequest","console","log","onCharsLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","imgStyle","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","sceleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration"],"mappings":"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","file":"static/js/4.3236b9c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    // <img src={process.env.PUBLIC_URL + '/error.gif'}/> //Если нам нужно обратиться к папке паблик то нужно написать вот такой путь с процесс и инв и паблик урл\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {loading, error, request, clearError} = useHttp()\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=91f439be32ba6f8326f987b1a44facfe';\r\n  const _baseOffset = 210;\r\n\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const _transformCharacter = (char) =>  {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about count of page',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'eu-us',\r\n      price: comics.prices[0].price || 'Not available'\r\n    }\r\n  }\r\n\r\n\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback( async (url, method = 'GET', body = null, headers={'Content-Type' : 'applications/json'}) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok){\r\n        throw new Error(`COuld not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n\r\n      return data\r\n    } catch(e){\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../spinner/spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} =  useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000) //берём диапозон делаем из него рандом и прибавляем минимальное значение чтобы найти персонажа\n        getCharacter(id)\n            .then(onCharLoaded) //Когда метод вызывается так то в него сразу передаётся как аргумент результат от промиса\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    let {description} = char\n    if (description === ''){\n        description = 'К сожалению на этого персонажа у нас нету данных';\n    }\n\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">\n                        try it\n                    </div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, thumbnail, homepage, wiki} = char;\n    let {description} = char;\n    let emptyImg = false;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        emptyImg = true;\n    }\n    if (description === ''){\n        description = 'К сожалению на этого персонажа у нас нету данных';\n    }\n\n    const imgClasses = emptyImg ? 'randomchar__img error' : 'randomchar__img';\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={imgClasses}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport './charList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/spinner';\nimport PropTypes from 'prop-types'; \n\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItenLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} =  useMarvelService();\n\n    useEffect((offset, initial) => {\n        onRequest(offset, true);\n        console.log('request!')\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItenLoading(false) : setNewItenLoading(true)\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n    }\n\n    const onCharsLoaded = (newCharList) => {\n\n        let ended = false;\n\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setChars(chars => [...chars, ...newCharList]);\n        setNewItenLoading(false);\n        setOffset(offset => +offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n    console.log('Listing!')\n\n    let itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n    \n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(chars);\n    \n    const spinner = loading && !newItemLoading ? <Spinner/> : null\n    const errorMessage = error ? <ErrorMessage/> : null;\n\n\n    return (\n        <div className=\"char__list\">\n            <ul className=\"char__grid\">\n                {errorMessage}\n                {spinner}\n                {items}\n            </ul>\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{\n                    'display': charEnded ? 'none' : 'block'\n                }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Sceleton from '../skeleton/Skeleton'\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId){return}\n\n        clearError()\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const sceleton = char || loading || error ? null : <Sceleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {sceleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, homepage, wiki, thumbnail, comics} = char;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.length > 0 ? null : 'There is no comics with this character'\n                }\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo)\r\n    this.setState({error: true});\r\n  }\r\n\r\n  render () {\r\n    if (this.state.error){\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { useState } from \"react\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = (props) => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n      setChar(id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n          <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n            <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n            <CharInfo  charId={selectedChar}/>   \r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}